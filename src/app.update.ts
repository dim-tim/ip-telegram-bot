import {
  Ctx,
  Hears,
  Help,
  InjectBot,
  Message,
  On,
  Start,
  Update,
} from 'nestjs-telegraf';
import { Telegraf } from 'telegraf';
import { actionButtons } from './app.buttons';
import { AppService } from './app.service';
import { showLastItem, showList } from './app.utils';
import { Context } from './context.interface';
import { isIPAddress } from 'ip-address-validator';

// const ips = [
//   {
//     id: 1,
//     ip: '192.1.1.1',
//     info: [
//       {
//         id: 1,
//         user_name: '@dkteluser',
//         date: '01-01-2023',
//         country: 'Argentina',
//         city: 'Bueno',
//         lat: '123213',
//         lon: '1232121',
//       },
//     ],
//   },
//   {
//     id: 2,
//     ip: '192.1.1.2',
//     info: [
//       {
//         id: 3,
//         user_name: '@sasa',
//         date: '01-01-2023',
//         country: 'Belarus',
//         city: 'Minsk',
//         lat: '123213',
//         lon: '1232121',
//       },
//     ],
//   },
// ];

@Update()
export class AppUpdate {
  constructor(
    @InjectBot() private readonly bot: Telegraf<Context>,
    private readonly appService: AppService,
  ) {}

  @Start()
  async startCommand(ctx: Context) {
    console.log(ctx.session);
    ctx.session.type = 'create';
    await ctx.reply(`–ü—Ä–∏–≤—ñ—Ç ${ctx.message.from?.first_name} ! üëã`);
    await ctx.reply('–í–∞—Å –≤—ñ—Ç–∞—î –∞–π–ø—ñ-–±–æ—Ç!', actionButtons());
  }

  @Help()
  async helpCommand(ctx: Context) {
    ctx.session.type = 'help';
    await ctx.reply(`/start - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞`);
    await ctx.reply('/help - –ü–æ–º–æ—â—å', actionButtons());
  }

  @Hears('üîé –ü—Ä–æ–±–∏—Ç—å IP')
  async checkIp(ctx: Context) {
    ctx.session.type = 'check';
    await ctx.reply('–ö–∏–¥–∞–π —Å—é–¥–∞ –∞–π–ø–∏—à–Ω–∏–∫ ‚¨á');
  }

  @Hears('üìã –°–ø–∏—Å–æ–∫ ip')
  async listIps(ctx: Context) {
    const ips = await this.appService.getAll();
    await ctx.reply(showList(ips));
  }

  @Hears('üÜò –ü–æ–º–æ—â—å')
  async help(ctx: Context) {
    ctx.session.type = 'help';
    await ctx.reply(`/start - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞`);
    await ctx.reply('/help - –ü–æ–º–æ—â—å', actionButtons());
  }

  // @Hears('‚ö°Ô∏è –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É')
  // async createTask(ctx: Context) {
  //   ctx.session.type = 'create';
  //   await ctx.reply('–û–ø–∏—à–∏ –∑–∞–¥–∞—á—É: ');
  // }
  //
  // @Hears('üìã –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á')
  // async listTask(ctx: Context) {
  //   const todos = await this.appService.getAll();
  //   await ctx.reply(showList(todos));
  // }
  //
  // @Hears('‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å')
  // async doneTask(ctx: Context) {
  //   ctx.session.type = 'done';
  //   await ctx.deleteMessage();
  //   await ctx.reply('–ù–∞–ø–∏—à–∏ ID –∑–∞–¥–∞—á–∏: ');
  // }
  //
  // @Hears('‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ')
  // async editTask(ctx: Context) {
  //   ctx.session.type = 'edit';
  //   await ctx.deleteMessage();
  //   await ctx.replyWithHTML(
  //     '–ù–∞–ø–∏—à–∏ ID –∏ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏: \n\n' +
  //       '–í —Ñ–æ—Ä–º–∞—Ç–µ - <b>1 | –ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ</b>',
  //   );
  // }
  //
  // @Hears('‚ùå –£–¥–∞–ª–µ–Ω–∏–µ')
  // async deleteTask(ctx: Context) {
  //   ctx.session.type = 'remove'
  //   await ctx.deleteMessage()
  //   await ctx.reply('–ù–∞–ø–∏—à–∏ ID –∑–∞–¥–∞—á–∏: ')
  // }

  @On('text')
  async getMessage(@Message('text') message: string, @Ctx() ctx: Context) {
    if (!ctx.session.type) return;

    if (ctx.session.type === 'create') {
      const ip = message.trim();
      if (message && isIPAddress(ip)) {
        await ctx.reply('–ê–π–ø–∏—à–Ω–∏–∫ –ø—Ä–æ—à–µ–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é...');

        const addressFromDB = await this.appService.getByIp(ip);

        await ctx.reply('–ü—Ä–æ–±–∏–≤–∞–µ–º –∏–Ω—Ñ—É –ø–æ –∞–π–ø–∏—à–Ω–∏–∫—É...');
        const ipServerResponse = await this.appService.getHttpInformationByIP(
          ip,
        );

        if (!ipServerResponse) {
          await ctx.reply('–ù–µ –º–æ–≥—É –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ—É —Å ipqualityscore.com üò≠');
          await ctx.reply('IP –Ω–µ –±—ã–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∞–∑—É.');
          return;
        }

        if (addressFromDB) {
          await ctx.reply(`IP ${ip} —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ...`);
          await ctx.reply(`–ù–æ–≤—ã–π IP (${ip}) –ø—Ä–∏–Ω—è—Ç...`);
          const saved = await this.appService.updateAddress(
            ip,
            ctx.message.from?.username ? ctx.message.from?.username : '',
            addressFromDB,
            ipServerResponse,
          );
          if (saved) {
            await ctx.reply(showLastItem(saved));
          } else {
            await ctx.reply(`–ù–µ —Å–º–æ–≥ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å IP –≤ –±–∞–∑—É...`);
          }
        } else {
          await ctx.reply(`–ù–æ–≤—ã–π IP ${ip} –ø—Ä–∏–Ω—è—Ç...`);
          const saved = await this.appService.createAddress(
            ip,
            ctx.message.from?.username ? ctx.message.from?.username : '',
            ipServerResponse,
          );
          if (saved) {
            console.log(saved);
            await ctx.reply(showLastItem(saved));
          } else {
            await ctx.reply(`–ù–µ —Å–º–æ–≥ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å IP –≤ –±–∞–∑—É...`);
          }
        }
      } else {
        // await ctx.deleteMessage();
        await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–π–ø–∏');
      }
    }
    // if (ctx.session.type === 'create') {
    //   const todos = await this.appService.createTask(message)
    //   await ctx.reply(showList(todos))
    // }
    //
    // if (ctx.session.type === 'done') {
    //   const todos = await this.appService.doneTask(Number(message))
    //
    //   if (!todos) {
    //     await ctx.deleteMessage()
    //     await ctx.reply('–ó–∞–¥–∞—á–∏ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!')
    //     return
    //   }
    //
    //   await ctx.reply(showList(todos))
    // }
    //
    // if (ctx.session.type === 'edit') {
    //   const [taskId, taskName] = message.split(' | ')
    //   const todos = await this.appService.editTask(Number(taskId), taskName)
    //
    //   if (!todos) {
    //     await ctx.deleteMessage()
    //     await ctx.reply('–ó–∞–¥–∞—á–∏ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!')
    //     return
    //   }
    //
    //   await ctx.reply(showList(todos))
    // }
    //
    // if (ctx.session.type === 'remove') {
    //   const todos = await this.appService.deleteTask(Number(message))
    //
    //   if (!todos) {
    //     await ctx.deleteMessage()
    //     await ctx.reply('–ó–∞–¥–∞—á–∏ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!')
    //     return
    //   }
    //
    //   await ctx.reply(showList(todos))
    // }
  }
}
