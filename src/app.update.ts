import {
  Ctx,
  Hears,
  Help,
  InjectBot,
  Message,
  On,
  Start,
  Update,
} from 'nestjs-telegraf';
import { Telegraf } from 'telegraf';
import { actionButtons } from './app.buttons';
import { AppService } from './app.service';
import { showLastItem, showList, showListIps } from './app.utils';
import { Context } from './context.interface';
import { isIPAddress } from 'ip-address-validator';

@Update()
export class AppUpdate {
  constructor(
    @InjectBot() private readonly bot: Telegraf<Context>,
    private readonly appService: AppService,
  ) {}

  @Start()
  async startCommand(ctx: Context) {
    console.log(ctx.session);
    ctx.session.type = 'create';
    await ctx.reply(`–ü—Ä–∏–≤—ñ—Ç ${ctx.message.from?.first_name} ! üëã`);
    await ctx.reply('–í–∞—Å –≤—ñ—Ç–∞—î –∞–π–ø—ñ-–±–æ—Ç!', actionButtons());
    await ctx.reply(
      '–ß—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å ip - –ø—Ä–æ—Å—Ç–æ –≤–≤–æ–¥–∏ –µ–≥–æ –Ω–∏–∂–µ –∏ –∂–º–∏ Enter',
      actionButtons(),
    );
    await ctx.reply(
      '–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø —Ñ—É–Ω–∫—Ü–∏–π - –ø–µ—Ä–µ—Ö–æ–¥–∏ –≤ –º–µ–Ω—é, –∂–º—è–∫–∞–π –∏ —Å–ª–µ–¥—É–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º',
      actionButtons(),
    );
  }

  @Help()
  async helpCommand(ctx: Context) {
    // ctx.session.type = 'help';
    await ctx.reply(`/start - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞`);
    await ctx.reply(`/list - –°–ø–∏—Å–æ–∫ IPs`);
    await ctx.reply('/help - –ü–æ–º–æ—â—å', actionButtons());
  }

  @Hears('üîé –ò–Ω—Ñ–∞ –ø–æ ip –∏–∑ –±–∞–∑—ã')
  async checkIp(ctx: Context) {
    ctx.session.type = 'check';
    await ctx.reply('–ö–∏–¥–∞–π —Å—é–¥–∞ –∞–π–ø–∏—à–Ω–∏–∫ ‚¨á');
  }

  @Hears('üìã –°–ø–∏—Å–æ–∫ ip –∏–∑ –±–∞–∑—ã')
  async listIps(ctx: Context) {
    // ctx.session.type = 'list';
    const ips = await this.appService.getAllWithoutInfo();
    await ctx.replyWithHTML(showListIps(ips));
  }

  // @Hears('üìã –°–ø–∏—Å–æ–∫ ip')
  // async listIps(ctx: Context) {
  //   const ips = await this.appService.getAll();
  //   await ctx.replyWithHTML(showList(ips));
  // }

  @Hears('‚ùå –£–¥–∞–ª–∏—Ç—å –∏–∑ –±–∞–∑—ã')
  async deleteTask(ctx: Context) {
    ctx.session.type = 'remove';
    // await ctx.deleteMessage();
    await ctx.reply('–í–≤–µ–¥–∏ –∞–π–ø–∏—à–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å ‚¨á');
  }

  @Hears('üÜò –ü–æ–º–æ—â—å')
  async help(ctx: Context) {
    // ctx.session.type = 'help';
    const helpMsg =
      '/start - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞' +
      '\n' +
      '/list - –°–ø–∏—Å–æ–∫ IPs' +
      '\n' +
      '/help - –ü–æ–º–æ—â—å' +
      '\n';
    await ctx.reply(helpMsg, actionButtons());
  }

  @On('text')
  async getMessage(@Message('text') message: string, @Ctx() ctx: Context) {
    if (!ctx.session.type) return;

    if (ctx.session.type === 'check') {
      const ip = message.trim();
      const addressFromDB = await this.appService.getByIp(ip);
      if (addressFromDB) {
        await ctx.reply(`–í–æ—Ç —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –ø–æ —ç—Ç–æ–º—É ip:`);
        await ctx.replyWithHTML(showLastItem(addressFromDB));
      } else {
        await ctx.reply(`IP ${ip} –≤ –±–∞–∑–µ –Ω–µ –Ω–∞–π–¥–µ–Ω...`);
      }

      ctx.session.type = 'create';
      return;
    }

    if (ctx.session.type === 'create') {
      const ip = message.trim();
      if (message && isIPAddress(ip)) {
        await ctx.reply('–ê–π–ø–∏—à–Ω–∏–∫ –ø—Ä–æ—à–µ–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é...');

        const addressFromDB = await this.appService.getByIp(ip);

        await ctx.reply('–ü—Ä–æ–±–∏–≤–∞–µ–º –∏–Ω—Ñ—É –ø–æ –∞–π–ø–∏—à–Ω–∏–∫—É...');
        const ipServerResponse = await this.appService.getHttpInformationByIP(
          ip,
        );

        if (!ipServerResponse) {
          await ctx.reply('–ù–µ –º–æ–≥—É –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ—É —Å ipqualityscore.com üò≠');
          await ctx.reply('IP –Ω–µ –±—ã–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∞–∑—É.');
          return;
        }

        if (addressFromDB) {
          await ctx.reply(`IP ${ip} —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ...`);
          await ctx.reply(`–ù–æ–≤—ã–π IP (${ip}) –ø—Ä–∏–Ω—è—Ç...`);
          const saved = await this.appService.updateAddress(
            ip,
            ctx.message.from?.username ? ctx.message.from?.username : '',
            addressFromDB,
            ipServerResponse,
          );
          if (saved) {
            await ctx.replyWithHTML(showLastItem(saved));
          } else {
            await ctx.reply(`–ù–µ —Å–º–æ–≥ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å IP –≤ –±–∞–∑—É...`);
          }
        } else {
          await ctx.reply(`–ù–æ–≤—ã–π IP ${ip} –ø—Ä–∏–Ω—è—Ç...`);
          const saved = await this.appService.createAddress(
            ip,
            ctx.message.from?.username ? ctx.message.from?.username : '',
            ipServerResponse,
          );
          if (saved) {
            console.log(saved);
            await ctx.replyWithHTML(showLastItem(saved));
          } else {
            await ctx.reply(`–ù–µ —Å–º–æ–≥ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å IP –≤ –±–∞–∑—É...`);
          }
        }
      } else {
        // await ctx.deleteMessage();
        await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–π–ø–∏');
      }
    }
    // if (ctx.session.type === 'create') {
    //   const todos = await this.appService.createTask(message)
    //   await ctx.reply(showList(todos))
    // }
    //
    // if (ctx.session.type === 'done') {
    //   const todos = await this.appService.doneTask(Number(message))
    //
    //   if (!todos) {
    //     await ctx.deleteMessage()
    //     await ctx.reply('–ó–∞–¥–∞—á–∏ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!')
    //     return
    //   }
    //
    //   await ctx.reply(showList(todos))
    // }
    //
    // if (ctx.session.type === 'edit') {
    //   const [taskId, taskName] = message.split(' | ')
    //   const todos = await this.appService.editTask(Number(taskId), taskName)
    //
    //   if (!todos) {
    //     await ctx.deleteMessage()
    //     await ctx.reply('–ó–∞–¥–∞—á–∏ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!')
    //     return
    //   }
    //
    //   await ctx.reply(showList(todos))
    // }
    //
    if (ctx.session.type === 'remove') {
      const ip = message.trim();
      const todos = await this.appService.deleteIP(ip);

      if (!todos) {
        // await ctx.deleteMessage();
        await ctx.reply(`${ip} –≤ –±–∞–∑–µ –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      } else {
        await ctx.reply(`${ip} —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã`);
      }

      ctx.session.type = 'create';
      return;
    }
  }
}
